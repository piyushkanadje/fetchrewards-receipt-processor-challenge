from flask  import request, jsonify
from pydantic import BaseModel, ValidationError
from . import receipt_processor_api
from receipt_processor.data_validation import Receipt, Item
import uuid
from application_logging.logging import log_request
import logging
from calculation_point.points_calculator import calculate_total_receipt_points 

logger = logging.getLogger(__name__)


#In memory data store for the request with unique id which is generated by below code
receipts = {}


@receipt_processor_api.route('/process', methods=["POST"])
@log_request
def process_receipt_for_id():
    try:
        data = request.get_json()
        receipt = Receipt(**data)
        receipt_id = str(uuid.uuid4())
        receipts[receipt_id] = receipt.model_dump()
    except ValidationError as e:
        error_details = []
        for err in e.errors():
            # Check if 'loc' exists and has elements; if not, provide a default message
            error_details = [
                {"field": err["loc"][0] if "loc" in err and err["loc"] else "unknown_field", "message": err["msg"]}
                for err in e.errors()
            ]
        logger.warning(f"Validation error(s): {error_details}")
        return jsonify({"error": error_details}), 400
    
    except Exception as e:
        logger.exception("Unexpected error during request processing")
        return jsonify({"status": "error", "message": "Internal server error"}), 500
    
    return jsonify({"id": receipt_id}), 200



@receipt_processor_api.route('/<id>/points', methods=["GET"])
def get_points_for_id(id):
    try:
        # Check if the receipt exists in the storage
        receipt = receipts.get(id)
        if not receipt:
            return jsonify({"error": "No receipt found for that ID, Please check ID Provided"}), 404

        # Calculate points for the found receipt
        points = calculate_total_receipt_points(receipt)
        return jsonify({"points": points}), 200
    
    except Exception as e:
        # Log the error with additional context
        logger.exception(f"Unexpected error during request processing for receipt ID {id}")
        return jsonify({"status": "error", "message": "Internal server error"}), 500
